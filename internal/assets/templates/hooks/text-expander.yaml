name: text-expander
description: Expand short text markers into longer configured text snippets
event: UserPromptSubmit
matcher: "*"
setup: |
  #!/bin/bash
  # Setup text expander hook
  
  # Create the Python hook script in .claude/hooks/
  mkdir -p .claude/hooks
  
  cat > .claude/hooks/text-expander.py << 'EOF'
  #!/usr/bin/env python3
  import json
  import sys
  import os
  import re
  
  def apply_text_expansions_with_escape(text, mappings, escape_char='\\'):
      r"""Apply text expansions with support for escape characters.
      
      Rules:
      - \marker -> literal marker (no expansion)
      - \\marker -> literal \ + expand marker  
      - \\\marker -> literal \ + literal marker
      - \\\\marker -> literal \\ + expand marker
      """
      if not mappings:
          return text
      
      result = text
      
      # Process each mapping
      for marker, replacement in mappings.items():
          # Create a pattern that matches the marker with potential escaping
          # We need to handle sequences of backslashes before the marker
          pattern = r'(\\*)' + re.escape(marker)
          
          def replace_func(match):
              backslashes = match.group(1)
              backslash_count = len(backslashes)
              
              if backslash_count == 0:
                  # No backslashes, normal expansion
                  return replacement
              elif backslash_count % 2 == 1:
                  # Odd number of backslashes: last one escapes the marker
                  # Return half the backslashes (rounded down) + literal marker
                  return '\\' * (backslash_count // 2) + marker
              else:
                  # Even number of backslashes: marker is not escaped
                  # Return half the backslashes + expanded marker
                  return '\\' * (backslash_count // 2) + replacement
          
          result = re.sub(pattern, replace_func, result)
      
      return result
  
  try:
      # Read JSON input from stdin
      input_data = json.load(sys.stdin)
      
      # Extract prompt
      prompt = input_data.get('prompt', '')
      
      # Clean the prompt to remove invalid Unicode characters
      try:
          # Encode and decode to clean up any invalid UTF-8 characters
          prompt = prompt.encode('utf-8', errors='ignore').decode('utf-8')
      except:
          # If that fails, use ascii encoding as fallback
          prompt = prompt.encode('ascii', errors='ignore').decode('ascii')
      
      if not prompt:
          sys.exit(0)
      
      # Load text expansion config from project .claude/config directory
      config_file = '.claude/config/text-expander.json'
      if not os.path.exists(config_file):
          sys.exit(0)
      
      with open(config_file, 'r', encoding='utf-8') as f:
          config = json.load(f)
      
      # Get escape character (default to backslash)
      escape_char = config.get('escape_char', '\\')
      mappings = config.get('mappings', {})
      
      # Apply text expansions with escape support
      expanded_prompt = apply_text_expansions_with_escape(prompt, mappings, escape_char)
      
      # If prompt changed, add expanded text as additional context
      if prompt != expanded_prompt:
          result = {
              "hookSpecificOutput": {
                  "hookEventName": "UserPromptSubmit",
                  "additionalContext": f"用户的意思是: {expanded_prompt}"
              }
          }
          print(json.dumps(result, ensure_ascii=True), flush=True)
          sys.exit(0)
      
      # No change needed, allow original prompt through
      sys.exit(0)
          
  except Exception as e:
      # On any error, allow original prompt through
      # For debugging, could log error to a file
      try:
          with open('.claude/hook-error.log', 'a', encoding='utf-8', errors='replace') as f:
              import traceback
              f.write(f"Text-expander error: {type(e).__name__}: {str(e)}\\n")
              f.write(f"Traceback: {traceback.format_exc()}\\n")
      except:
          pass  # Ignore logging errors
      sys.exit(0)
  EOF
  
  # Make the Python script executable
  chmod +x .claude/hooks/text-expander.py
  
  # Create cross-platform Python runner script
  cat > .claude/hooks/run-python.sh << 'EOF'
  #!/bin/bash
  
  # Cross-platform Python runner script
  # Tries different Python commands to ensure compatibility across systems
  
  if command -v python3 > /dev/null 2>&1; then
      python3 "$@"
  elif command -v python > /dev/null 2>&1; then
      python "$@"
  elif command -v py > /dev/null 2>&1; then
      py -3 "$@"
  else
      echo "Python not found. Please install Python or add it to PATH." >&2
      exit 1
  fi
EOF

  # Make the runner script executable
  chmod +x .claude/hooks/run-python.sh
  
  # Create config directory and config file
  mkdir -p .claude/config
  
  # Check if user provided custom mappings via interactive configuration
  if [ -f ".claude-temp-mappings.txt" ]; then
    # Build JSON from user's interactive input
    echo "{" > .claude/config/text-expander.json
    echo '  "mappings": {' >> .claude/config/text-expander.json
    
    # Read mappings from temp file and convert to JSON
    first=true
    while IFS=$'\t' read -r marker replacement; do
      if [ "$first" = true ]; then
        first=false
      else
        echo "," >> .claude/config/text-expander.json
      fi
      # Escape quotes in replacement text
      escaped_replacement=$(echo "$replacement" | sed 's/"/\\"/g')
      printf '    "%s": "%s"' "$marker" "$escaped_replacement" >> .claude/config/text-expander.json
    done < .claude-temp-mappings.txt
    
    echo "" >> .claude/config/text-expander.json
    echo "  }" >> .claude/config/text-expander.json
    echo "}" >> .claude/config/text-expander.json
    
    # Clean up temp file
    rm -f .claude-temp-mappings.txt
  else
    # Use default mappings if no interactive configuration
    cat > .claude/config/text-expander.json << 'EOF'
  {
    "mappings": {
      "-d": "该睡觉了",
      "-z": "该睡觉了",
      "-v": "查看详细信息",
      "-h": "显示帮助信息",
      "-l": "列出所有项目",
      "-s": "显示状态信息",
      "-uu": "你是谁"
    },
    "escape_char": "\\"
  }
  EOF
  fi
  
  echo "Text expander hook installed successfully!"
  echo "Configuration file created at: .claude/config/text-expander.json"
  echo "Hook script created at: .claude/hooks/text-expander.py"
command: bash .claude/hooks/run-python.sh .claude/hooks/text-expander.py
timeout: 10
enabled: true